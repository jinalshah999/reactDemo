{"version":3,"sources":["components/AddTodo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","state","Id","Title","Status","handleTitleChange","event","setState","target","value","console","log","handleIdChange","handleStatusChange","handleToDoSubmit","preventDefault","props","onAdd","onSubmit","this","className","onChange","placeholder","type","Component","TodoList","todos","addToDo","todo","deleteToDo","filteredItem","filter","x","editToDo","map","key","style","color","onClick","icon","library","add","faTrash","faPlus","faEdit","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oRA0EeA,E,2MAtEXC,MAAQ,CACJC,GAAI,GACJC,MAAO,GACPC,OAAQ,W,EAEZC,kBAAoB,SAACC,GAEjB,EAAKC,SAAS,CACVJ,MAAOG,EAAME,OAAOC,QACrB,kBAAMC,QAAQC,IAAI,EAAKV,MAAME,W,EAGpCS,eAAiB,SAACN,GAEd,EAAKC,SAAS,CACVL,GAAII,EAAME,OAAOC,S,EAIzBI,mBAAqB,SAACP,GAElB,EAAKC,SAAS,CACVH,OAAQE,EAAME,OAAOC,S,EAI7BK,iBAAmB,SAACR,GAChBA,EAAMS,iBACN,EAAKC,MAAMC,MAAM,CACbf,GAAI,EAAKD,MAAMC,GACfC,MAAO,EAAKF,MAAME,MAClBC,OAAQ,EAAKH,MAAMG,SAEvB,EAAKG,SAAS,CACVL,GAAI,GACJC,MAAO,GACPC,OAAQ,a,wEAIZ,OACI,6BACI,iDACA,0BAAMc,SAAUC,KAAKL,kBACjB,yBAAKM,UAAU,cACX,2BAAOA,UAAU,eACbX,MAAOU,KAAKlB,MAAMC,GAClBmB,SAAUF,KAAKP,eACfU,YAAY,QAEpB,yBAAKF,UAAU,cACX,2BAAOA,UAAU,eACbX,MAAOU,KAAKlB,MAAME,MAClBkB,SAAUF,KAAKd,kBACfiB,YAAY,WAEpB,yBAAKF,UAAU,cAEX,4BAAQA,UAAU,eAAeX,MAAOU,KAAKlB,MAAMG,OAAQiB,SAAUF,KAAKN,oBACtE,4BAAQJ,MAAM,WAAd,WACA,4BAAQA,MAAM,QAAd,UAIR,4BAAQW,UAAU,+BAA+BG,KAAK,UAAtD,kB,GAlEEC,a,QCoFPC,E,2MAjFXxB,MAAQ,CACJyB,MAAO,CACH,CACIxB,GAAI,IACJC,MAAO,QACPC,OAAQ,a,EAIpBuB,QAAU,SAACC,GACP,EAAKrB,SAAS,CACVmB,MAAM,GAAD,mBAAM,EAAKzB,MAAMyB,OAAjB,CAAwBE,O,EAGrCC,WAAa,SAACD,GACV,IAAME,EAAe,EAAK7B,MAAMyB,MAAMK,QAAO,SAAAC,GAAC,OAAIA,EAAE9B,KAAO0B,EAAK1B,MAChE,EAAKK,SAAS,CACVmB,MAAOI,K,EAGfG,SAAW,SAACD,GACR,EAAKzB,UAAS,SAAAN,GAAK,MAAK,CACpByB,MAAOzB,EAAMyB,MAAMQ,KAAI,SAAAN,GACnB,OAAIA,EAAK1B,KAAO8B,EAAE9B,GACP,eACA0B,EADP,CAEIxB,OAAwB,SAAhBwB,EAAKxB,OAAoB,UAAY,SAG1CwB,U,wEAMb,IAAD,OACL,OACI,6BACI,kBAAC,EAAD,CAASX,MAAOE,KAAKQ,UACrB,6BACA,kDACA,2BAAOP,UAAU,SACb,+BACI,4BACI,kCACA,qCACA,sCACA,wCAGR,+BACKD,KAAKlB,MAAMyB,MAAMQ,KAAI,SAAAF,GAClB,OACI,wBAAIG,IAAKH,EAAE9B,IACP,4BAAK8B,EAAE9B,IACP,4BAAK8B,EAAE7B,OACP,wBAAIiC,MAAO,CAAEC,MAAoB,SAAbL,EAAE5B,OAAoB,MAAQ,UAAa4B,EAAE5B,QACjE,4BACI,4BAAQkC,QAAS,kBAAM,EAAKT,WAAWG,IAAIZ,UAAU,mBACjD,8BACI,kBAAC,IAAD,CAAiBmB,KAAK,YAHlC,IAOI,4BAAQD,QAAS,kBAAM,EAAKL,SAASD,IAAIZ,UAAU,mBAC/C,8BACI,kBAAC,IAAD,CAAiBmB,KAAK,uB,GAnE/Cf,a,sBCEvBgB,IAAQC,IAAIC,IAASC,IAAQC,K,IAYdC,E,iLAPX,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,W,GALUI,aCIEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.7c402797.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass AddTodo extends Component {\r\n\r\n    state = {\r\n        Id: \"\",\r\n        Title: \"\",\r\n        Status: \"Pending\"\r\n    };\r\n    handleTitleChange = (event) => {\r\n\r\n        this.setState({\r\n            Title: event.target.value\r\n        }, () => console.log(this.state.Title));\r\n\r\n    };\r\n    handleIdChange = (event) => {\r\n\r\n        this.setState({\r\n            Id: event.target.value\r\n        });\r\n\r\n    };\r\n    handleStatusChange = (event) => {\r\n\r\n        this.setState({\r\n            Status: event.target.value\r\n        });\r\n\r\n    };\r\n    handleToDoSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAdd({\r\n            Id: this.state.Id,\r\n            Title: this.state.Title,\r\n            Status: this.state.Status\r\n        });\r\n        this.setState({\r\n            Id: \"\",\r\n            Title: \"\",\r\n            Status: \"Pending\"\r\n        });\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>AddTodo Component</h3>\r\n                <form onSubmit={this.handleToDoSubmit} >\r\n                    <div className=\"form-group\" >\r\n                        <input className=\"form-control\"\r\n                            value={this.state.Id}\r\n                            onChange={this.handleIdChange}\r\n                            placeholder=\"Id\"></input>\r\n                    </div>\r\n                    <div className=\"form-group\" >\r\n                        <input className=\"form-control\"\r\n                            value={this.state.Title}\r\n                            onChange={this.handleTitleChange}\r\n                            placeholder=\"Title\"></input>\r\n                    </div>\r\n                    <div className=\"form-group\" >\r\n\r\n                        <select className=\"form-control\" value={this.state.Status} onChange={this.handleStatusChange}>\r\n                            <option value=\"Pending\">Pending</option>\r\n                            <option value=\"Done\">Done</option>\r\n                        </select>\r\n\r\n                    </div>\r\n                    <button className=\"form-control btn btn-primary\" type=\"submit\">Add ToDo</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default AddTodo;","import React, { Component } from \"react\";\r\nimport AddTodo from \"./AddTodo\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nclass TodoList extends Component {\r\n    state = {\r\n        todos: [\r\n            {\r\n                Id: \"1\",\r\n                Title: \"hello\",\r\n                Status: \"Pending\"\r\n            }\r\n        ]\r\n    };\r\n    addToDo = (todo) => {\r\n        this.setState({\r\n            todos: [...this.state.todos, todo]\r\n        });\r\n    };\r\n    deleteToDo = (todo) => {\r\n        const filteredItem = this.state.todos.filter(x => x.Id !== todo.Id);\r\n        this.setState({\r\n            todos: filteredItem\r\n        });\r\n    };\r\n    editToDo = (x) => {\r\n        this.setState(state => ({\r\n            todos: state.todos.map(todo => {\r\n                if (todo.Id === x.Id) {\r\n                    return {\r\n                        ...todo,\r\n                        Status: todo.Status === \"Done\" ? \"pending\" : \"Done\"\r\n                    };\r\n                } else {\r\n                    return todo;\r\n                }\r\n            })\r\n        }));\r\n\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AddTodo onAdd={this.addToDo} ></AddTodo>\r\n                <hr></hr>\r\n                <h3>TodoList Component</h3>\r\n                <table className=\"table\" >\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Id</th>\r\n                            <th>Title</th>\r\n                            <th>Status</th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.todos.map(x => {\r\n                            return (\r\n                                <tr key={x.Id} >\r\n                                    <td>{x.Id}</td>\r\n                                    <td>{x.Title}</td>\r\n                                    <td style={{ color: x.Status === \"Done\" ? \"red\" : \"green\" }} >{x.Status}</td>\r\n                                    <td>\r\n                                        <button onClick={() => this.deleteToDo(x)} className=\"btn btn-primary\" >\r\n                                            <span>\r\n                                                <FontAwesomeIcon icon=\"trash\"></FontAwesomeIcon>\r\n                                            </span>\r\n                                        </button>\r\n                                        |\r\n                                        <button onClick={() => this.editToDo(x)} className=\"btn btn-primary\" >\r\n                                            <span>\r\n                                                <FontAwesomeIcon icon=\"edit\"></FontAwesomeIcon>\r\n                                            </span>\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default TodoList;","import React, { Component } from 'react';\nimport TodoList from \"./components/TodoList\";\nimport './App.css';\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faTrash, faPlus, faEdit } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faTrash, faPlus, faEdit);\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoList></TodoList>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}